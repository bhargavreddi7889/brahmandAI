"use client"

import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { DocumentIcon, DocumentTextIcon, ExclamationCircleIcon, ClockIcon, BookOpenIcon, UserIcon } from '@heroicons/react/24/outline';

interface PDFMetadata {
  title: string;
  pageCount: number;
  wordCount: number;
  author: string;
  creationDate: string;
}

interface PDFSummaryResponse {
  summary: string;
  metadata?: PDFMetadata;
  error?: string;
}

interface PDFUploaderProps {
  onSummaryGenerated: (summary: string) => void;
}

const PDFUploader: React.FC<PDFUploaderProps> = ({ onSummaryGenerated }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [summary, setSummary] = useState<string | null>(null);
  const [fileName, setFileName] = useState<string | null>(null);
  const [metadata, setMetadata] = useState<PDFMetadata | null>(null);

  const onDrop = async (acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (!file) return;

    setIsLoading(true);
    setError(null);
    setSummary(null);
    setMetadata(null);
    setFileName(file.name);

    try {
      const formData = new FormData();
      formData.append('file', file);

      console.log("Uploading PDF file:", file.name, "Size:", file.size);
      
      // Use the API route
      console.log("Sending request to /api/summarize...");
      const response = await fetch('/api/summarize', {
        method: 'POST',
        body: formData,
      });

      console.log("Response status:", response.status);
      
      const data: PDFSummaryResponse = await response.json();
      
      if (!response.ok) {
        const errorMessage = data.error || data.summary || `Server error: ${response.status}`;
        console.error("API error response:", data);
        throw new Error(errorMessage);
      }

      console.log("Response data received:", data);
      
      if (data.summary) {
        setSummary(data.summary);
        onSummaryGenerated(data.summary);
        
        if (data.metadata) {
          setMetadata(data.metadata);
        }
      } else {
        throw new Error('No summary was generated by the API');
      }
    } catch (err) {
      console.error("PDF processing error:", err);
      setError(err instanceof Error ? err.message : 'An error occurred while processing the PDF');
    } finally {
      setIsLoading(false);
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
    },
    maxFiles: 1,
  });
  
  // Format date string if available
  const formatDate = (dateStr: string) => {
    if (dateStr === 'Unknown') return 'Unknown';
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString();
    } catch (e) {
      return dateStr;
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto p-4">
      <div
        {...getRootProps()}
        className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors
          ${isDragActive ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' : 'border-gray-300 hover:border-blue-500 dark:border-gray-700 dark:hover:border-blue-400'}`}
      >
        <input {...getInputProps()} />
        <DocumentIcon className="mx-auto h-12 w-12 text-gray-400" />
        <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">
          {isDragActive
            ? 'Drop the PDF here'
            : 'Drag and drop a PDF file here, or click to select'}
        </p>
        {fileName && !isDragActive && (
          <p className="mt-2 text-sm font-medium text-blue-600 dark:text-blue-400">
            Current file: {fileName}
          </p>
        )}
      </div>
      
      {isLoading && (
        <div className="mt-6 text-center">
          <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-3 text-sm text-gray-600 dark:text-gray-300">Processing PDF... This may take a moment.</p>
        </div>
      )}

      {error && (
        <div className="mt-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-lg">
          <div className="flex items-start">
            <ExclamationCircleIcon className="h-5 w-5 text-red-500 mr-2 mt-0.5" />
            <div>
              <h3 className="font-medium text-red-800 dark:text-red-300 mb-1">Error Processing PDF</h3>
              <p>{error}</p>
            </div>
          </div>
        </div>
      )}

      {summary && (
        <div className="mt-6 bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
          {metadata && (
            <div className="mb-4 pb-4 border-b border-gray-200 dark:border-gray-700">
              <h3 className="text-lg font-semibold mb-2">Document Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="flex items-center">
                  <DocumentTextIcon className="h-5 w-5 text-gray-500 mr-2" />
                  <span className="text-sm">
                    <span className="font-medium">Pages:</span> {metadata.pageCount}
                  </span>
                </div>
                <div className="flex items-center">
                  <BookOpenIcon className="h-5 w-5 text-gray-500 mr-2" />
                  <span className="text-sm">
                    <span className="font-medium">Words:</span> {metadata.wordCount.toLocaleString()}
                  </span>
                </div>
                <div className="flex items-center">
                  <UserIcon className="h-5 w-5 text-gray-500 mr-2" />
                  <span className="text-sm">
                    <span className="font-medium">Author:</span> {metadata.author}
                  </span>
                </div>
                <div className="flex items-center">
                  <ClockIcon className="h-5 w-5 text-gray-500 mr-2" />
                  <span className="text-sm">
                    <span className="font-medium">Created:</span> {formatDate(metadata.creationDate)}
                  </span>
                </div>
              </div>
            </div>
          )}
          
          <div className="flex items-center mb-4">
            <DocumentTextIcon className="h-6 w-6 text-blue-500 mr-2" />
            <h3 className="text-lg font-semibold">Summary</h3>
          </div>
          <div className="prose max-w-none dark:prose-invert">
            <p className="text-gray-700 dark:text-gray-300 whitespace-pre-line">{summary}</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default PDFUploader; 